$ make main # adjust compiler in Makefile if necessary
/opt/gcc/gcc-4.5.2/bin/gcc -Wall -std=c99 -MMD -MP   -c -o main.o main.c
/opt/gcc/gcc-4.5.2/bin/gcc -Wall -std=c99 -MMD -MP   -c -o heat_3D.o heat_3D.c
/opt/gcc/gcc-4.5.2/bin/gcc -Wall -std=c99 -MMD -MP   -c -o nrutil.o nrutil.c
/opt/gcc/gcc-4.5.2/bin/gcc -Wall -std=c99 -MMD -MP   -c -o gauss_elim.o gauss_elim.c
/opt/gcc/gcc-4.5.2/bin/gcc -lm -Wl,-rpath=/opt/gcc/gcc-4.5.2/lib  main.o heat_3D.o nrutil.o gauss_elim.o   -o main
$ ./main -h
./main: invalid option -- h
Usage: ./main [-X length in x dimension (in meters) ]
              [-Y length in y dimension (in meters) ]
              [-Z length in z dimension (in meters) ]
              [-x number of divisions along x dimension ]
              [-y number of divisions along y dimension ]
              [-z number of divisions along z dimension ]
              [-n number of time steps to calculate ]
              [-s how many time steps between reports ]
              [-p how long to pause reports (in seconds) ]
              [-a diffusivity constant (in m/s^2) ]
              [-t length of time step (in seconds) ]
              [-r ratio of noise applied to initial condition (0=none) ]
              [-b value of constant boundary condition (or p for periodic) ]
              [-m method to use (FTCS, BE, or CN) ]
$ ./main -x2 -y2 -z3 -n500 -s10 -p.1 -t.03 -r 0 -m FTCS -b 9 
...

The code is written in C99, using a variant of nrutil.{c,h} with double
precision third order tensors. The output is ANSI text, as plotting in
Matlab or with matplotlib seemed like a fun problem rather than a central
one. 

I am confident in my implementation of these features:
 l_x != l_y != l_z
 dx != dy != dz
 command line options for everything, including which method, physical setup, etc.
 default vaules for when command line options are left out
 FTCS, BE, and CN
 gaussian elimination
 guassian curve with noise
 periodic boundary conditions

These features were not attempted:
 ADI CN
 source term
 runtime performance plotting

todo:

separate files for direct and iterative matrix solvers?

ftcs could be separated from be and cn as explicit vs. implicit

flatten can be instant, but only if I'm using the full size of the matrices first n-1 dimensions
I can test this by checking if &A[nrl][nch+1] == &A[nrl+1][ncl]
but why bother? I can't remove code if I have to accomodate both options 

Perhaps when I create my own "vectors", b and x, I could really make matrices, and since I
know I'm using (1,X,1,Y,1,Z), at least the indexing while populating b can be more natural.
For x, I really have to put it back into dst, which may or may not be full sized.

use a struct for T and its dimensions
use struct for other collections of parameters?

1 to m for populating A is strange. for loops with i, j, k would be much easier to read.
